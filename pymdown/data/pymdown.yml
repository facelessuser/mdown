# Your HTML template via an absolute path.
# If not an absolute path, PyMdown will use the basepath of the input if available,
# and lastly the user directory if it can't find the file.
template: default/template.html

# Load up js scripts (in head)
#
# Is an array of scripts (path or link).
# If it points to a physical file, it will be included.
# PyMdown will look relative to the binary if it can't find the file.
#
# This can be overridden in a file's frontmatter via the 'settings' key word:
#
# ---
# settings:
#   js:
#     - somefile.js
# ---
#
# but if you want to append to the list, you can use 'js' keyword directly in the
# frontmatter:
#
# ---
# js:
#   - somefile.js
# ---
#
js:
  - '^default/details_polyfill.js'

# Select your CSS for you output html
# or you can have it all contained in your HTML template
#
# Is an array of stylesheets (path or link).
# If it points to a physical file, it will be included.
# PyMdown will look relative to the binary if it can't find the file.
#
# This can be overridden in a file's frontmatter via the 'settings' key word:
#
# ---
# settings:
#   css:
#     - somefile.css
# ---
#
# but if you want to append to the list, you can use just the 'css' keyword in the
# frontmatter:
#
# ---
# css:
#   - somefile.css
# ---
#
css:
  - '^default/markdown.css'

# Include the pygments css for code highlight blocks.
use_pygments_css: true

# Name of installed Pygments style to use.
pygments_style: default

# Pygments class to use.  This applies a class to the Pygments CSS
# so that only elements with the class below will be syntax highlighted.
# If using this, make sure you've configured CodeHilite and/or InlineHilite
# to use the same name.
pygments_class: highlight

# Enable Jinja2 Template support inside of Markdown content
# WARNING: It is recommended to use this per file when needed
#          in the frontmatter as having template tags enabled
#          all the time could be very annoying, but you are
#          able to if you want.
use_jinja2: false

# By default, Jinja2 uses {% block %} for blocks. You can change that here
# or change it per file in your frontmatter. Only affects Markdown content template tags.
jinja2_block: ['{%', '%}']

# By default, Jinja2 uses {{ variable }} for variables. You can change that here
# or change it per file in your frontmatter. Only affects Markdown content template tags.
jinja2_variable: ['{{', '}}']

# By default, Jinja2 uses {# comment #} for comments. You can change that here
# or change it per file in your frontmatter. Only affects Markdown content template tags.
jinja2_comment: ['{#', '#}']

# By default resource paths are converted to relative file paths when possible;
# this disables conversion.  Previews will still convert paths to render preview proper.
disable_path_conversion: false

# By default resource paths are converted to relative file paths when possible;
# this disables conversion.
path_conversion_absolute: false

# Length of tabs in source files
tab_length: 4

# Output format (html|xhtml)
output_format: 'xhtml'

# Python Markdown extensions
markdown_extensions:
  markdown.extensions.smarty:
    smart_quotes: false
  markdown.extensions.admonition:
  markdown.extensions.footnotes:
  markdown.extensions.attr_list:
  markdown.extensions.def_list:
  markdown.extensions.tables:
  markdown.extensions.abbr:
  markdown.extensions.toc:
    title: Table of Contents
    slugify: !!python/name:pymdownx.slugs.uslugify
    permalink: '\uf0c1'
  pymdownx.highlight:
    css_class: codehilite
    extend_pygments_lang:
      - name: php-inline
        lang: php
        options:
          startinline: true
      - name: pycon3
        lang: pycon
        options:
          python3: true
  pymdownx.magiclink:
    repo_url_shortener: true
    repo_url_shorthand: true
    social_url_shorthand: true
  pymdownx.extrarawhtml:
  pymdownx.betterem:
  pymdownx.tilde:
  pymdownx.caret:
  pymdownx.mark:
  pymdownx.smartsymbols:
  pymdownx.emoji:
    emoji_generator: !!python/name:pymdownx.emoji.to_png
  pymdownx.tasklist:
  pymdownx.progressbar:
  pymdownx.superfences:
    custom_fences: 
      - name: flow
        class: uml-flowchart
        format: !!python/name:pymdownx.superfences.fence_code_format
      - name: sequence
        class: uml-sequence-diagram
        format: !!python/name:pymdownx.superfences.fence_code_format
      - name: math
        class: arithmatex
        format: !!python/name:pymdownx.arithmatex.fence_mathjax_format
  pymdownx.arithmatex:
  pymdownx.inlinehilite:
    custom_inline:
      - name: math
        class: arithmatex
        format: !!python/name:pymdownx.arithmatex.inline_mathjax_format
  pymdownx.escapeall:
    hardbreak: True
    nbsp: True
  pymdownx.keys:
    separator: "\uff0b"
  pymdownx.details:
  pymdownx.striphtml:


extra:
  # By configuring 'flow', 'sequence', or 'mathjax' to `true` in a file's frontmatter,
  # and using the following in a the template, conditional includes per file can be achieved:
  #
  #     {% if extra.flow or extra.sequence %}{{ extra.diagram_common_js|getjs }}{% endif %}
  #     {%if extra.flow %}{{ extra.flow_js|getjs }}{% endif %}
  #     {%if extra.sequence %}{{ extra.sequence_js|getjs }}{% endif %}
  #     {%if extra.mathjax %}{{ extra.mathjax_js|getjs }}{% endif %}

  flow: False
  flow_js:
    - https://cdnjs.cloudflare.com/ajax/libs/flowchart/1.6.5/flowchart.min.js
    - default/flow-loader.js

  sequence: False
  sequence_js:
    - https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js
    - https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js
    - default/sequence-loader.js

  diagram_common_js:
    - https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js
    - default/uml-converter.js

  mathjax: False
  mathjax_js:
    - default/mathjax-config.js
    - https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js
